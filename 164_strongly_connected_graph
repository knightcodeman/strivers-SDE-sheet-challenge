#include<bits/stdc++.h>
using namespace std;

void topo(vector<int>adj[],int node,stack<int>&st,vector<bool>&visited){
    visited[node]=true;
    for(auto it:adj[node]){
        if(!visited[it]){
            topo(adj,it,st,visited);
        }
    }
    st.push(node);
}

void dfs(vector<int>adj[],int node,vector<bool>&visited,vector<int>&temp){
    visited[node]=true;
    temp.push_back(node);
    for(auto it:adj[node]){
        if(!visited[it]){
            dfs(adj,it,visited,temp);
        }
    }
    
}
vector<vector<int>> stronglyConnectedComponents(int n, vector<vector<int>> &edges)
{
    vector<int>adj1[n],adj2[n];

    //make adjency list for original graph
    for(auto it:edges){
        adj1[it[0]].push_back(it[1]);
    }
    
    //Initialise visited array for visited node and stack for topo sort node
    vector<bool>visited(n,false);
    stack<int>st;

    // Do topo sort and store it in stack st
    for(int i=0;i<n;i++){
         if(!visited[i]){
             topo(adj1,i,st,visited);
         }
    }
 
    // Make transpose graph
    for(int i=0;i<n;i++){
        visited[i]=false;
        for(auto it:adj1[i]){
            adj2[it].push_back(i);
        }
    }
    
  vector<vector<int>>ans;
   //for Every node top on the stack and all the neigbour node connected to it and
   // neighbour of neighbour as well will be stored in temp array and then 
   // added to the final answer seperately, this process will continue until stack->empty
   while(!st.empty()){
       int node=st.top();
       st.pop();
       if(!visited[node]){
           vector<int>temp;
           dfs(adj2,node,visited,temp);
           ans.push_back(temp);
       }
   }
    return ans;

}
